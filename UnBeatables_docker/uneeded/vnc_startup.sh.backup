#!/bin/bash
### every exit != 0 fails the script
set -e

## print out help
help (){
echo "
USAGE:
docker run -it -p 6901:6901 -p 5901:5901 unbeatables/workshop

IMAGES:
unbeatables/workshop

TAGS:
latest  stable version of branch 'master'
dev     current development version of branch 'dev'

OPTIONS:
-w, --wait      (default) keeps the UI and the vncserver up until SIGINT or SIGTERM will received
-s, --skip      skip the vnc startup and just execute the assigned command.
                example: docker run unbeatables/workshop --skip bash
-d, --debug     enables more detailed startup output
                e.g. 'docker run unbeatables/workshop --debug bash'
-h, --help      print out this help
"
}
if [[ $1 =~ -h|--help ]]; then
    help
    exit 0
fi

source $HOME/.bashrc

# add `--skip` to startup args, to skip the VNC startup procedure
if [[ $1 =~ -s|--skip ]]; then
    echo -e "Servidor VNC não será executado."
    echo -e "Executando comando: '${@:2}'"
    exec "${@:2}"
fi
if [[ $1 =~ -d|--debug ]]; then
    echo -e "Habilitando DEBUG"
    export DEBUG=true
fi

## correct forwarding of shutdown signal
cleanup () {
    kill -s SIGTERM $!
    exit 0
}
trap cleanup SIGINT SIGTERM

## write correct window size to chrome properties
## $STARTUPDIR/chrome-init.sh

## resolve_vnc_connection
VNC_IP=$(hostname -i)

if ! [ -z "$DISPLAY" ]; then
    VNC_DISP="$DISPLAY"
fi

## create log directory
LOG_DIR="$STARTUPDIR"

## change vnc password
echo -e "Cadastrando nova senha de acesso ao VNC"
# first entry is control, second is view (if only one is valid for both)
mkdir -p "$HOME/.vnc"
PASSWD_PATH="$HOME/.vnc/passwd"

if [[ -f $PASSWD_PATH ]]; then
    echo -e "Excluindo senha já existente para acesso ao VNC"
    rm -f $PASSWD_PATH
fi

if [[ $VNC_VIEW_ONLY == "true" ]]; then
    echo "Executando servidor VNC em modo 'VIEW ONLY'!"
    #create random pw to prevent access
    echo $(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 20) | vncpasswd -f > $PASSWD_PATH
fi
echo "$VNC_PW" | vncpasswd -f >> $PASSWD_PATH
chmod 600 $PASSWD_PATH


## start vncserver and noVNC webclient
echo -e "Iniciando cliente noVNC"
NO_VNC_DEBUG=""
if [[ $DEBUG == true ]]; then 
#    echo "$NO_VNC_HOME/utils/launch.sh --vnc localhost:$VNC_PORT --listen $NO_VNC_PORT"
    NO_VNC_DEBUG="--verbose"
    echo "$NO_VNC_HOME/utils/websockify/run --web $NO_VNC_HOME --log-file=$LOG_DIR/websockify.log $NO_VNC_DEBUG $NO_VNC_PORT localhost:$VNC_PORT"
fi
#$NO_VNC_HOME/utils/launch.sh --vnc localhost:$VNC_PORT --listen $NO_VNC_PORT &> $LOG_DIR/no_vnc_startup.log &
echo -e "Iniciando Websockets proxy" &> $LOG_DIR/no_vnc_startup.log
echo "$NO_VNC_HOME/utils/websockify/run --web $NO_VNC_HOME --log-file=$LOG_DIR/websockify.log $NO_VNC_DEBUG $NO_VNC_PORT localhost:$VNC_PORT" &> $LOG_DIR/no_vnc_startup.log
$NO_VNC_HOME/utils/websockify/run --web $NO_VNC_HOME --log-file=$LOG_DIR/websockify.log $NO_VNC_DEBUG $NO_VNC_PORT localhost:$VNC_PORT &> $LOG_DIR/no_vnc_startup.log &
PID_SUB="$!"
sleep 1
if ! ps -p ${PID_SUB} >/dev/null; then
    PID_SUB=
    echo "Falha na ativação do WebSockets proxy"
    exit 1
fi

echo -e "Iniciando servidor VNC"
echo -e "Iniciando servidor VNC" &> $LOG_DIR/no_vnc_startup.log
echo "exclui locks antigos do vnc para tornar o container reconectável"
vncserver -kill $VNC_DISP &> $LOG_DIR/vnc_startup.log \
    || rm -rfv /tmp/.X*-lock /tmp/.X11-unix &> $LOG_DIR/vnc_startup.log \
    || echo "nenhum 'lock' encontrado"

echo -e "Iniciando servidor VNC com os parâmetros: VNC_COL_DEPTH=$VNC_COL_DEPTH, VNC_RESOLUTION=$VNC_RESOLUTION\n..."
if [[ $DEBUG == true ]]; then echo "vncserver $VNC_DISP -depth $VNC_COL_DEPTH -geometry $VNC_RESOLUTION"; fi
vncserver $VNC_DISP -depth $VNC_COL_DEPTH -geometry $VNC_RESOLUTION &> $LOG_DIR/vnc_startup.log

echo -e "Iniciando interface gráfica..."
$HOME/wm_startup.sh &> $LOG_DIR/wm_startup.log

## log connect options
echo -e "Ambiente VNC iniciado"
echo -e "VNCSERVER habilitado no DISPLAY= $DISPLAY($VNC_DISP) \n\t=> conecte via VNC viewer com $VNC_IP:$VNC_PORT"
echo -e "noVNC HTML client iniciado:\n\t=> conecte via http://$VNC_IP:$NO_VNC_PORT/?password=...\n"


if [[ $DEBUG == true ]] || [[ $1 =~ -t|--tail-log ]]; then
    echo -e "\n$HOME/.vnc/*$DISPLAY.log"
    # if option `-t` or `--tail-log` block the execution and tail the VNC log
    tail -f $LOG_DIR/*.log $HOME/.vnc/*$DISPLAY.log
fi

if [ -z "$1" ] || [[ $1 =~ -w|--wait ]]; then
    wait $PID_SUB
else
    # unknown option ==> call command
    echo "Executando comando: '$@'"
    exec "$@"
fi